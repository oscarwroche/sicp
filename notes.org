* Chapter 1

** 1.1 The Elements of Programming

*** 1.1.3 Evaluation combinations

Evaluation - strict (all subexpressions must be evaluated before
evaluating full expression)

Primitive elements are operator, numerals and variables.

*** 1.1.5 Substitution Model for Procedure Application

Applicative vs. normal order: normal does not evaluate until needed.

*** 1.1.7 Newton's Method

Declarative (math) -> description / non-constructive
Imperative (CS) -> constructive

*** 1.1.8 Procedures as black-box abstractions

Procedure definitions suppress detail.
Local parameter names help to have black-box (no dependency
on the outside).

In order to have local versions of functions, function definitions are
allowed inside other function definitions - in which case the
variables defined in a procedure above don't have to be redefined -
this is called *lexical scoping*.

** 1.2 Procedures and the Processes They Generate

What is the shape of processes ? What resources do they need ?

*** 1.2.1 Linear Recursion and Iteration

Iteration has *state variables* and rules that describe how they
should evolve. It contains the complete state of the system at each
point.

A recursive procedure can generate an iterative process.

*** 1.2.2 Tree Recursion

Fibonacci recursive / iterative process examples.

When trying to write iterative version, think from
bottom to top - and think about invariants.
** 1.3 Formulating abstractions with Higher-Order Procedures
*** 1.3.1 Procedures as Arguments
Introducing passing a /next/ parameter to a generic summation method.

